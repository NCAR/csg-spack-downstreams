#!/bin/bash

# Spack Upstream installation script
#
#

# Simple printing function
print_usage () {
cat << EOF
Usage: spack-downstream [OPTIONS]
Script to set up a personal downstream Spack instance and link it to the upstream system Spack.

Optional arguments:
    -h, --help                      print this message
    --downstream-root=PATH          specify installation location for downstreams.
                                    (default: /glade/work/$USER/spack-downstreams)
    --modify-rc=OPTION              modify your startup script to automatically load Spack at startup
                                    (valid options are "yes", "no", "bashrc", "tcshrc")
    --upstream-version=VERSION      specify alternate ncarenv version. (default: $NCAR_ENV_VERSION)"
    -v, --verbose                   print out each installation step to the terminal
EOF
}

# Simple logging function
log () {
    if [ "$VERBOSE" = "True" ]; then
        echo "$@"
    fi
}

clone_repo () {
    if [ -d "$INSTALL_DIR" ]; then
         >&2 echo "Error: Installation directory at $INSTALL_DIR is not empty."
         >&2 echo "       Please select an empty directory to install this application."
         exit 1
    fi

    log "git config --global --add safe.directory /glade/u/apps/$NCAR_HOST/$UPSTREAM_VERSION/spack"
    log "cd /glade/u/apps/$NCAR_HOST/$UPSTREAM_VERSION/spack"
    log 'export GIT_COMMIT=$(git rev-parse HEAD)'
    log "cd - > /dev/null"
    log "git clone -c feature.manyFiles=true https://github.com/NCAR/csg-spack-fork $INSTALL_DIR"
    log "cd $INSTALL_DIR"
    log "git checkout $GIT_COMMIT"
    log "cd - > /dev/null"

    if ! grep -q $UPSTREAM_ROOT/spack <<< $(git config --global --get safe.directory); then
        git config --global --add safe.directory $UPSTREAM_ROOT/spack
    fi

    cd $UPSTREAM_ROOT/spack
    export GIT_COMMIT=$(git rev-parse HEAD)
    cd - > /dev/null
    git clone -c feature.manyFiles=true https://github.com/NCAR/csg-spack-fork $INSTALL_DIR || exit 1

    cd $INSTALL_DIR
    git reset --hard $GIT_COMMIT
    cd - > /dev/null
}

# Copy system yaml information
copy_yaml () {
    for file in config.yaml compilers.yaml mirrors.yaml packages.yaml repos.yaml modules.yaml; do
        log "cp $UPSTREAM_ROOT/config/$file $INSTALL_DIR/etc/spack"
        cp $UPSTREAM_ROOT/config/$file $INSTALL_DIR/etc/spack

        if [ $file == modules.yaml ]; then
            log "sed -i '/ncar_.*\.lua/ s/ncar/user/' $INSTALL_DIR/etc/spack/$file"
            sed -i '/ncar_.*\.lua/ s/ncar/user/' $INSTALL_DIR/etc/spack/$file
        fi
    done

    # Disable Local Configuration
    export SPACK_DISABLE_LOCAL_CONFIG=true

    log "$INSTALL_DIR/bin/spack config add 'upstreams:ncarenv-$UPSTREAM_VERSION:install_tree:$UPSTREAM_ROOT/spack/opt/spack"
    $INSTALL_DIR/bin/spack config add "upstreams:ncarenv-$UPSTREAM_VERSION:install_tree:$UPSTREAM_ROOT/spack/opt/spack"

	log "$INSTALL_DIR/bin/spack config add 'modules:default:roots:lmod:${DOWNSTREAM_ROOT:-/glade/work/$USER/spack-downstreams}/$NCAR_HOST/modules/$UPSTREAM_VERSION'"
	$INSTALL_DIR/bin/spack config add "modules:default:roots:lmod:${DOWNSTREAM_ROOT:-/glade/work/$USER/spack-downstreams}/$NCAR_HOST/modules/$UPSTREAM_VERSION"
}

# Check for existing RC modifications from previous spack-downstream installs
check_rc () {
    # Check for existing spack downstream install if it exists prompt user to replace or skip.
    log "export CHECK_INSTALL=$(egrep -c "$NCAR_HOST DOWNSTREAM INITIALIZE" ~/.$MODIFY_RC 2> /dev/null)"
    export CHECK_INSTALL=$(egrep -c "$NCAR_HOST DOWNSTREAM INITIALIZE" ~/.$MODIFY_RC 2> /dev/null)

    if [ $CHECK_INSTALL -ge 1 ]; then
        echo -n "Another downstream is already activated by your $MODIFY_RC. Replace (y/N)? "
        while true; do
	        read UINPUT
            UINPUT=${UINPUT,,}
            if [[ yes == ${UINPUT:-n}* ]]; then
                log "sed -i \"/$NCAR_HOST DOWNSTREAM INITIALIZE/,/SPACK DOWNSTREAM DONE/d\" ~/.$MODIFY_RC"
                sed -i "/$NCAR_HOST DOWNSTREAM INITIALIZE/,/SPACK DOWNSTREAM DONE/d" ~/.$MODIFY_RC
                break	
            elif [[ no == $UINPUT* ]]; then
                echo "Skipping... To initialize this installation, please run:"
		        echo "source $INSTALL_DIR/share/spack/setup-env.$SRC_FILE"
		        exit
            else
                echo -n "Please select (y)es or (n)o: "
	        fi
        done
    fi
}

# Modify User RC
modify_bashrc () {
echo -n "Modifying .bashrc... "

if [ "$VERBOSE" = "True" ]; then
cat << EOT
cat >> ~/.bashrc << EOF
# --$NCAR_HOST DOWNSTREAM INITIALIZE--
export SPACK_DISABLE_LOCAL_CONFIG=true
[ \$NCAR_HOST == $NCAR_HOST ] && . $INSTALL_DIR/share/spack/setup-env.sh
# --SPACK DOWNSTREAM DONE--
EOF
EOT
fi

cat >> ~/.bashrc << EOF
# --$NCAR_HOST DOWNSTREAM INITIALIZE--
export SPACK_DISABLE_LOCAL_CONFIG=true
[ \$NCAR_HOST == $NCAR_HOST ] && . $INSTALL_DIR/share/spack/setup-env.sh
# --SPACK DOWNSTREAM DONE--
EOF

echo 'complete!'
}

modify_cshrc () {
echo -n "Modifying .${MODIFY_RC}... "

if [ "$VERBOSE" = "True" ]; then
cat << EOT
cat >> ~/.$MODIFY_RC << EOF
# --$NCAR_HOST DOWNSTREAM INITIALIZE--
setenv SPACK_DISABLE_LOCAL_CONFIG true
if ( \$?NCAR_HOST && \$NCAR_HOST == $NCAR_HOST ) then
    source $INSTALL_DIR/share/spack/setup-env.csh
endif
# --SPACK DOWNSTREAM DONE--
EOF
EOT
fi

cat >> ~/.$MODIFY_RC << EOF
# --$NCAR_HOST DOWNSTREAM INITIALIZE--
setenv SPACK_DISABLE_LOCAL_CONFIG true
if ( \$?NCAR_HOST && \$NCAR_HOST == $NCAR_HOST ) then
    source $INSTALL_DIR/share/spack/setup-env.csh
endif
# --SPACK DOWNSTREAM DONE--
EOF

echo 'complete!'
}

# Assume current ncarenv for version by default
UPSTREAM_VERSION=$NCAR_ENV_VERSION

# Simple flag parser
while [ $# -gt 0 ]
do
    case "${1}" in
	    (--downstream-root=?*)      DOWNSTREAM_ROOT="$(echo ${1} | cut -f 2 -d '=')" ;;
        (-v | --verbose)            VERBOSE="True" ;;
	    (-h | --help)               print_usage; exit 0 ;;
	    (--modify-rc=?*)            MODIFY_RC="$(echo ${1} | cut -f 2 -d '=')" ;;
        (--upstream-version=?*)     UPSTREAM_VERSION="$(echo ${1} | cut -f 2 -d '=')" ;;
        (*)                         >&2 echo "Error: unrecognized option ${1}"; print_usage; exit 1 ;;
    esac
    shift
done

# Temporary Version Identifier
UPSTREAM_ROOT=/glade/u/apps/$NCAR_HOST/$UPSTREAM_VERSION

if [ -z "$UPSTREAM_VERSION" ] || [ -z "$NCAR_HOST" ]; then
    >&2 echo "Error: No ncarenv detected. Load an ncarenv module before attempting to run this script."
    exit 1
elif [ ! -d $UPSTREAM_ROOT ]; then
    >&2 echo "Error: No software stack found for ncarenv version $UPSTREAM_VERSION."
    exit 1
fi
echo "ncarenv version: $UPSTREAM_VERSION"

# Set install path
INSTALL_DIR=${DOWNSTREAM_ROOT:-/glade/work/$USER/spack-downstreams}/$NCAR_HOST/$UPSTREAM_VERSION
echo -e "prefix: $INSTALL_DIR\n"

# Clone repo
clone_repo

# Copy YAML files
copy_yaml

echo -e "\nSpack has been successfully installed and configured for downstream use!\n"

# Modify RC file if desired
if [[ $SHELL == *csh ]]; then
    SRC_FILE=csh
    RCFILE=tcshrc
else
    SRC_FILE=sh
    RCFILE=bashrc
fi

if [[ -z $MODIFY_RC ]]; then
    echo -n "Would you like to automatically initialize Spack at login by modifying your .$RCFILE (y/N)? "

    while true; do
        read MOD
        MOD=${MOD,,}

        if [[ yes == ${MOD:-no}* ]]; then
            MODIFY_RC=yes
            break
        elif [[ no == $MOD* ]]; then
            break
        else
            echo -n "Please select (y)es or (n)o: "
        fi
    done
fi

if [[ yes == ${MODIFY_RC:-no}* ]]; then
    MODIFY_RC=$RCFILE
elif [[ no == ${MODIFY_RC:-no}* ]]; then
    echo "To initialize your shell for spack use please run the command:"
    echo "source $INSTALL_DIR/share/spack/setup-env.$SRC_FILE"
    exit
fi

check_rc

if [[ $MODIFY_RC == bashrc ]]; then
    modify_bashrc
elif [[ $MODIFY_RC == *cshrc ]]; then
    modify_cshrc
else
    >&2 echo "Error: unrecognized source file $MODIFY_RC. Skipping..."
    exit 1
fi

echo "Modification successful! Please restart your shell to apply changes."
