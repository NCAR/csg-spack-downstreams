#!/bin/bash

# Spack Upstream installation script
#
#

# Simple printing function
print_usage () {
    echo "spack-downstreams: Script to set up a local spack instance and link it to the upstream system spack"
    echo "usage:"
    echo "       -v | --verbose                   : print out each installation step to the terminal"
    echo "            --prefix=<install-path>     : specify spack installation location. Default: /glade/work/$USER/ncarenv-$VERSION"
    echo "            --version=<ncarenv-version> : specify ncarenv version. Default: default"
    echo "            --modify-rc=<True|False>    : modify your startup script to automatically load Spack at startup"
    echo "       -h | --help                      : print this message"
    
}

# Simple logging function
log () {
    if [ "$VERBOSE" = "True" ]; then
        echo "$@"
    fi
}

clone_repo () {
    log "git config --global --add safe.directory /glade/u/apps/gust/$VERSION/spack"
    log "cd /glade/u/apps/gust/$VERSION/spack"
    log "export GIT_COMMIT=$(git rev-parse HEAD)"
    log "cd - > /dev/null"
    log "git clone -c feature.manyFiles=true https://github.com/NCAR/csg-spack-fork $INSTALL_DIR"
    log "cd $INSTALL_DIR"
    log "git checkout $GIT_COMMIT"
    log "cd - > /dev/null"

    git config --global --add safe.directory /glade/u/apps/gust/$VERSION/spack
    cd /glade/u/apps/gust/$VERSION/spack
    export GIT_COMMIT=$(git rev-parse HEAD)
    cd - > /dev/null
    git clone -c feature.manyFiles=true https://github.com/NCAR/csg-spack-fork $INSTALL_DIR
    if [ ! $? -eq 0 ]; then
         echo "spack-downstream error: Installation directory at: $INSTALL_DIR is not empty. Please select an empty directory to install this application."
         exit 0
    fi
    
    cd $INSTALL_DIR
    git reset --hard $GIT_COMMIT
    cd - > /dev/null
}

# Copy system yaml information
copy_yaml () {
     # Check to see if yaml files exist. If not clone them to the directory.
    for file in config.yaml compilers.yaml mirrors.yaml packages.yaml repos.yaml modules.yaml; do
        if [ ! -f "$INSTALL_DIR/etc/spack/$file" ]; then
            log "cp /glade/u/apps/$NCAR_HOST/default/config/$file $INSTALL_DIR/etc/spack"
            cp /glade/u/apps/$NCAR_HOST/default/config/$file $INSTALL_DIR/etc/spack

            if [ $file == modules.yaml ]; then
                log "sed -i '/ncar_.*\.lua/ s/ncar/user/' $INSTALL_DIR/etc/spack/$file"
                sed -i '/ncar_.*\.lua/ s/ncar/user/' $INSTALL_DIR/etc/spack/$file
            fi
        fi
    done

    # Disable Local Configuration
    export SPACK_DISABLE_LOCAL_CONFIG=true

    # Check to see if upstreams has been created. If not create it and fill it with the following values.
    if [ ! -f "$INSTALL_DIR/etc/spack/upstreams.yaml" ]; then
        log "$INSTALL_DIR/bin/spack config add 'upstreams:spack-instance-1:install_tree:/glade/u/apps/$NCAR_HOST/$VERSION/spack/opt/spack/"
        $INSTALL_DIR/bin/spack config add "upstreams:spack-instance-1:install_tree:/glade/u/apps/$NCAR_HOST/$VERSION/spack/opt/spack/"
    fi

    # Modify modiles.yaml to add new lmod root
    if [ -f "$INSTALL_DIR/etc/spack/modules.yaml" ]; then
	log "$INSTALL_DIR/bin/spack config add 'modules:default:roots:lmod:/glade/work/$USER/spack-downstreams/$NCAR_HOST/modules/$VERSION'"
	$INSTALL_DIR/bin/spack config add "modules:default:roots:lmod:/glade/work/$USER/spack-downstreams/$NCAR_HOST/modules/$VERSION"
    fi
}

# Check for existing RC modifications from previous spack-downstream installs
check_rc () {
    log export CHECK_INSTALL=$(egrep -c "SPACK DOWNSTREAMS INITIALIZE" ~/.bashrc)
    export CHECK_INSTALL=$(egrep -c "SPACK DOWNSTREAMS INITIALIZE" ~/.bashrc) 
    if [ "$CHECK_INSTALL" -ge "1" ]; then
        echo "Spack downstreams has detected an existing installation of spack downstreams in your bashrc. (r)eplace|(s)kip"
        while true; do
	    read UINPUT
            if [ "$UINPUT" == "r" ]; then
                log sed -i '/SPACK DOWNSTREAMS INITIALIZE/,/SPACK DOWNSTREAMS DONE/d' ~/.bashrc
                sed -i '/SPACK DOWNSTREAMS INITIALIZE/,/SPACK DOWNSTREAMS DONE/d' ~/.bashrc
                break	
            elif [ "$UINPUT" == "s" ]; then
                echo "Skipping... To initialize this installation, please run:"
		echo ". $INSTALL_DIR/share/spack/setup-env.sh"
		exit 0
            else
                echo "Please select (r)eplace|(s)kip"
	    fi
        done
    fi 
}

# Modify User RC
modify_rc () {
    echo "Modifying bashrc..."

    log "echo '# SPACK DOWNSTREAMS INITIALIZE' >> ~/.bashrc"
    log "echo 'export SPACK_DISABLE_LOCAL_CONFIG=true'"
    log "echo '. $INSTALL_DIR/share/spack/setup-env.sh' >> ~/.bashrc"
    log "echo '# SPACK DOWNSTREAMS DONE' >> ~/.bashrc"

    echo "# --SPACK DOWNSTREAMS INITIALIZE--" >> ~/.bashrc
    echo "export SPACK_DISABLE_LOCAL_CONFIG=true" >> ~/.bashrc
    echo ". $INSTALL_DIR/share/spack/setup-env.sh" >> ~/.bashrc
    echo "# --SPACK DOWNSTREAMS DONE--" >> ~/.bashrc

    echo '...complete!'
}

# Simple flag parser
while [ "$#" -gt 0 ]
do
    case "${1}" in
	(--prefix=?*)     PREFIX="$(echo ${1} | cut -f 2 -d '=')" ;;
        (-v | --verbose)  VERBOSE="True" ;;
	(-h | --help)     print_usage; exit 0 ;;
	(--modify-rc=?*)  MODIFY_RC="$(echo ${1} | cut -f 2 -d '=')" ;;
        (--version=?*)    VERSION="$(echo ${1} | cut -f 2 -d '=')" ;;
        (*)               echo "spack-downstream error: unrecognized option ${1}"; print_usage; exit 1 ;;
    esac
    shift
done

# Temporary Version Identifier
if [ -z "$VERSION" ]; then
    if [ ! -z "$NCAR_ENV_VERSION" ]; then
        VERSION=$NCAR_ENV_VERSION
    else
	echo "spack-downstream error: No ncarenv detected. Load a ncarenv before attempting to run spack upstream or set a requested version with --version"
    fi
fi
echo "ncarenv version: $VERSION"

# Set install path
if [ -z "$PREFIX" ]; then
    INSTALL_DIR="/glade/work/$USER/spack-downstreams/$NCAR_HOST/$VERSION"
else
    INSTALL_DIR=$PREFIX
fi
echo "prefix: $INSTALL_DIR"

# Clone repo
clone_repo

# Copy YAML files
copy_yaml 

# Modify bashrc
echo "Spack has been successfully installed and configure for downstream use in: $INSTALL_DIR"

if [ "$MODIFY_RC" = "True" ]; then
    check_rc
    modify_rc
elif [ "$MODIFY_RC" = "False" ]; then
    exit 0
else
    echo "Would you like this installer to automatically initialize spack at login by modifying .bashrc?"
    echo "(y|n)"
    while true; do
        read MOD
        if [ "$MOD" == 'y' ]; then
            check_rc
	    modify_rc
            echo "Modification successful! Please restart your shell to apply changes"
	    exit 0
        elif [ "$MOD" == 'n' ]; then
            echo "To initialize your shell for spack use please run the command:"
            echo ". $INSTALL_DIR/share/spack/setup-env.sh"
            exit 0
        else
            echo "Please select (y)es|(n)o"
        fi
    done
fi

